// **********************************************************
// Fuzzing example - buffer overflow in a simple logic mockup
//
// Copyright 2020
// Charles Lucas
// ZeroSquared.io
// **********************************************************


#include <iostream>
#include <cstring>
#include <string.h>
#include <stdlib.h>

#define BUFFER_SIZE 20

int main(int argc, char* argv[]) {
    char username[BUFFER_SIZE];       // Allocate space for BUFFER_SIZE characters plus the null
    char password[BUFFER_SIZE];       // Allocate space for BUFFER_SIZE characters plus the null
    char root_password[BUFFER_SIZE];  // Allocate space for BUFFER_SIZE characters plus the null

    const char user1[] = "bob\0";
    const char user2[] = "jason\0";
    const char user3[] = "neo\0";
    const char* users[] = {user1, user2, user3};
    
    const char password1[] = "robertpaulson\0";
    const char password2[] = "getout\0";
    const char password3[] = "misteranderson\0";
    const char* passwords[] = {password1, password2, password3};

    // Check that our user actually entered command-line inputs
    if (argc < 2) {
        std::cout << "Enter username/password:  exploitable2 <username> <password>";
        exit(0);
    }

    // Copy our input username in a safe(r) manner
    std::strncpy(username, argv[1], BUFFER_SIZE-1);  // strncpy should copy only 20 characters.
                                                     // However, we have to make sure the destination string
                                                     //   is null-terminated
    username[BUFFER_SIZE-1] = '\0';

    std::cout << "Checking password for user: " << username << std::endl;

    int result = strcmp(username, "root");
    //std::cout << "Result = " << result << std::endl;

    if (result == 0) {
        // Do something special to test the root password
        // Blindly copy the passed-in string into our fixed-width variable.
        // If the passed-in string is more than six characters, the program should crash
        //   before we see the output printed below.
        strcpy(root_password, argv[2]);  // Crash here

        if (!strcmp (root_password, "poolontheroof")) {  // strcmp returns 0 if the strings are exactly the same
          std::cout << "Authenticated as root!" << std::endl;
        }
    }
    else {
        // Test all the other users
        for (int i = 0; i <=2; ++i) {
            if (!strcmp (users[i], username)) {  // strcmp returns 0 if the strings are exactly the same
                if (strcmp (passwords[i], password)) {
                    std::cout << "Authenticated user " << users[i] << "!" << std::endl;
                }
            }
        }
        std::cout << "Failed to authenticate any users." << std::endl;
    }

}