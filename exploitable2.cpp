// **********************************************************
// Fuzzing example - buffer overflow in a simple login mockup
//
// Copyright 2020
// Charles Lucas
// ZeroSquared.io
// **********************************************************


#include <iostream>
#include <cstring>
#include <string.h>
#include <stdlib.h>

#define BUFFER_SIZE 15

int main(int argc, char* argv[]) {
    char username[BUFFER_SIZE];       // Allocate space for BUFFER_SIZE characters plus the null
    char password[BUFFER_SIZE];       // Allocate space for BUFFER_SIZE characters plus the null
    char root_password[BUFFER_SIZE];  // Allocate space for BUFFER_SIZE characters plus the null

    const char user1[] = "bob\0";
    const char user2[] = "jason\0";
    const char user3[] = "neo\0";
    const char* users[] = {user1, user2, user3};
    
    const char password1[] = "robertpaulson\0";
    const char password2[] = "getout\0";
    const char password3[] = "misteranderson\0";
    const char* passwords[] = {password1, password2, password3};

    std::cout << "Enter username:  ";
    std::cin >> username;                    // Insecure method of getting input (can write outside the bounds of username)
    //std::cin.getline(username, BUFFER_SIZE);   // Protected method of getting input (trancates at the bounds of username)

    int cmpresult = strcmp(username, "root");
    //std::cout << "Compare result = " << cmpresult << std::endl;

    if (cmpresult == 0) {
        // Do something special if user logs in as root
        std::cout << "Enter the root password: ";

        // Blindly copy the passed-in string into our fixed-width variable.
        // If the passed-in string is more than BUFFER_SIZE characters, the program could crash
        //   before we see the output printed below.
        std::cin >> root_password;   // Insecure method of getting input (can write outside the bounds of root_password)

        if (!strcmp (root_password, "poolontheroof")) {  // strcmp returns 0 if the strings are exactly the same
          std::cout << "Authenticated as root!" << std::endl;
        }
    }
    else {
        int authenticated = 0;

        // Else iterate over the other users
        for (int i = 0; i <=2; ++i) {
            if (!strcmp (users[i], username)) {  // strcmp returns 0 if the strings are exactly the same

                std::cout << "Enter password for user " << username << ": ";
                std::cin >> password;                        // Insecure method of getting input (can write outside the bounds of root_password)
                //std::cin.getline(password, BUFFER_SIZE);   // Protected method of getting input (trancates at the bounds of username)

                if (!strcmp (passwords[i], password)) {
                    std::cout << "Authenticated user " << users[i] << "!" << std::endl;
                    authenticated = 1;
                }
            }
        }

        if (authenticated == 0){
            std::cout << "Failed to authenticate any users." << std::endl;
        }
    }

}